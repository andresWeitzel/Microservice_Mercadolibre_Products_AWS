service: microservice-mercadolibre-products-aws

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment: ${file(./serverless_ssm.yml)}
  apiGateway:
    apiKeys:
      - name: xApiKey
        value: ${file(./serverless_ssm.yml):X_API_KEY}
  logs:
    # Enable REST API logs
    restApi:
      accessLogging: true
      format: "requestId: $context.requestId"
      executionLogging: true
      level: INFO
      fullExecutionData: true
      role: arn:aws:iam::xxxx:role
      roleManagedExternally: false

plugins:
  - serverless-esbuild
  - serverless-s3-local
  - serverless-offline-ssm
  - serverless-offline

functions:
  #DATABASE TEST
  databaseTestConnection:
    handler: src/controllers/db/connection.handler
    description: Function in charge of checking the connection to the db
    events:
      - http:
          path: /${file(./serverless_ssm.yml):API_VERSION}/${file(./serverless_ssm.yml):API_ENDPOINT_PRODUCTS_NAME}/db-connection
          method: get
          private: true
  #PRODUCTS          
  addProduct:
    handler: src/controllers/product/addProduct.handler
    description: lambda function to add a product to the database
    events:
      - http:
          path: /${file(./serverless_ssm.yml):API_VERSION}/${file(./serverless_ssm.yml):API_ENDPOINT_PRODUCTS_NAME}/add
          method: POST
          private: true  
  getByIdProduct:
    handler: src/controllers/product/getByIdProduct.handler
    description: lambda function to get a product from the database according to its id
    events:
      - http:
          path: /${file(./serverless_ssm.yml):API_VERSION}/${file(./serverless_ssm.yml):API_ENDPOINT_PRODUCTS_NAME}/id/{id}
          method: GET
          private: true
  getAllProduct:
    handler: src/controllers/product/getAllProduct.handler
    description: lambda function to get all paginated products from the database
    events:
      - http:
          path: /${file(./serverless_ssm.yml):API_VERSION}/${file(./serverless_ssm.yml):API_ENDPOINT_PRODUCTS_NAME}/list
          method: GET
          private: true       
  #PRODUCT_SPECIFICATION
  addProductSpecification:
    handler: src/controllers/productSpecification/addProductSpecification.handler
    description: Function to store an product specification object inside the database for have a reference to s3 bucket
    events:
      - http:
          method: POST
          path: /${file(./serverless_ssm.yml):API_VERSION}/${file(./serverless_ssm.yml):API_ENDPOINT_PRODUCTS_SPECIFICATIONS_NAME}/add/{productId}
          private: true                                  
resources:
  - ${file(src/resources/api-gateway.yml)}
  - ${file(src/resources/bucket-s3.yml)}

custom:
  s3:
    host: ${file(./serverless_ssm.yml):S3_HOST}
    directory: ${file(./serverless_ssm.yml):S3_DIRECTORY}
  serverless-offline-ssm:
    stages:
      - dev
    ssm: ${file(./serverless_ssm.yml)}
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002    